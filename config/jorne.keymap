/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&mt { quick-tap-ms = <200>; };

&lt { quick-tap-ms = <200>; };

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  GUI |   ~  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  [   | GUI/] |
            //        | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |CTRL/'|
            //        | LALT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RALT |
            //                           | RSE | SPC | LWR |   | LWR | BKSP | RSE |

            bindings = <
&mo 1  &kp Y  &kp U  &kp I      &kp O    &kp P      &none    &kp Y        &kp U           &kp I        &kp O    &kp P     &kp LBKT       &mt RWIN RBKT
       &kp H  &kp J  &kp K      &kp L    &kp SEMI   &none    &kp H        &kp J           &kp K        &kp L    &kp SEMI  &mt RCTRL SQT
       &kp N  &kp M  &kp COMMA  &kp DOT  &kp SLASH  &none    &kp N        &kp M           &kp COMMA    &kp DOT  &kp FSLH  &kp BSLH
                                &to RSE  &mo 3      &none    &lt LWR ESC  &mt RSHFT BSPC  &lt RSE DEL
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |     |  _  |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | F11 | F12 |
            //       |  +  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  -  |
            //       |  =  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |     |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &soft_off       &kp F1    &kp F2  &kp F3       &kp F4    &kp F5       &kp F6     &kp F7    &kp F8       &kp F9    &kp F10   &kp F11          &mt RGUI F12
        &mt LCTRL PLUS  &kp EXCL  &kp AT  &kp HASH     &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS  &kp STAR     &kp LPAR  &kp RPAR  &mt RCTRL MINUS
        &mt LALT EQUAL  &kp N1    &kp N2  &kp N3       &kp N4    &kp N5       &kp N6     &kp N7    &kp N8       &kp N9    &kp N0    &trans
                                          &lt ADJ TAB  &trans    &trans       &trans     &trans    &lt ADJ DEL
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |     | NMLK |  /  |  7  |  8  |  9  |  -  |   | VOLU| HOME| PRSC| PGUP| SCLK| CLCK|     |
            //       | CTRL |  *  |  4  |  5  |  6  |  +  |   | MUT | LEFT|  UP | RGHT| INS | APP |
            //       |      |  0  |  1  |  2  |  3  |  .  |   | VOLD| END | DOWN| PGDN| PAUS|     |
            //                          |     |     | ADJ |   | ADJ |     |     |

            bindings = <
&kp KP_NUMLOCK  &kp KP_SLASH     &kp KP_N7        &kp KP_NUMBER_8  &kp KP_N9  &kp KP_MINUS  &none    &kp C_VOL_UP  &kp HOME  &kp UP     &kp PG_UP  &kp SLCK   &kp CAPS         &trans
                &kp KP_MULTIPLY  &kp KP_NUMBER_4  &kp KP_N4        &kp KP_N6  &kp KP_PLUS   &none    &kp C_MUTE    &kp LEFT  &kp DOWN   &kp RIGHT  &kp UNDER  &mt RCTRL K_APP
                &kp KP_N0        &kp KP_N1        &kp KP_N2        &kp KP_N3  &kp KP_DOT    &none    &kp C_VOL_DN  &kp END   &kp PSCRN  &kp PG_DN  &kp INS    &trans
                                                                   &to 0      &trans        &none    &lt ADJ ESC   &trans    &trans
            >;
        };

        adjust_layer {
            // -----------------------------------------------------------------------------------------
            // | RST | BLDR |     |     |     |     |     |   |     |     |     |     |     | BLDR | RST |
            //       | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
            //       |      |     |     |     |     |     |   |     |     |     |     |     |      |
            //                          |     |     |     |   |     |     |     |

            bindings = <
&bootloader  &out OUT_TOG     &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &rgb_ug RGB_EFR                    &rgb_ug RGB_EFF                    &none     &bt BT_SEL 4     &bt BT_SEL 3     &bt BT_SEL 2     &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR  &bootloader
             &rgb_ug RGB_ON   &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_SPD                    &rgb_ug RGB_SPI                    &none     &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI  &bt BT_SEL 1  &none         &none
             &rgb_ug RGB_OFF  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_COLOR_HSB(120,100,50)  &rgb_ug RGB_COLOR_HSB(237,100,50)  &none     &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_SPD  &none         &none         &none
                                                                &none                              &none                              &trans    &trans           &none            &trans
            >;
        };
    };
};
